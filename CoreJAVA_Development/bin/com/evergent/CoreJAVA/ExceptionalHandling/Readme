Exception Handling:
1.Exception Handling is Mechanism:
		Exception handling is a mechanism in Java used to handle runtime errors so that the normal flow of the application can be maintained.
2.Exceptions are inbuilt Mechanism of JAVA:
		Java has a built-in mechanism for handling exceptions, providing classes and keywords specifically for managing errors and exceptional conditions.
3.All Exception are executed while abnormal conditions:
		Exceptions represent abnormal conditions; they are thrown when such conditions are encountered during execution. 
4.Normal flow it wonâ€™t execute any exceptions:
		In the normal flow of a program, exceptions are not thrown. Exceptions are only executed when something unexpected occurs.
5.Once any exceptions are occurring in java then remain lines of code is unreachable:
 		If an exception is thrown and not caught, the subsequent lines of code in the same block are not executed, making them unreachable. This is why handling exceptions properly is important to ensure the application doesn't terminate unexpectedly.
6.Java.lang.Throwable is super class for Exception and Errors:
		java.lang.Throwable is the superclass of all errors and exceptions in Java. It has two main subclasses: Exception and Error.
7.There are two types of Exceptions in JAVA:
		a. Checked Exceptions
		b. Unchecked Exceptions
		Exceptions are categorized into checked exceptions (compile-time) and unchecked exceptions (runtime).
8.All Checked Exceptions are Compile time exceptions:
 		Checked exceptions are checked at compile time. The compiler ensures that these exceptions are handled either with a try-catch block or by declaring them with throws.
9.All Unchecked Exceptions are Runtime exceptions:
		Unchecked exceptions are not checked at compile time, meaning the compiler does not require them to be handled. 
10.There are 5 keywords in Exceptions Handling:
		a. try
		b. catch
		c. finally
		d. throws
		e. throw
		These are the five keywords used for exception handling in Java.
11.try is for business logic or Statements:
		The try block contains code that might throw an exception. it can contain any code that might generate exceptions.
12.catch is for handling exceptions:
		The catch block is used to handle exceptions that are thrown by the try block.
13.finally is block, if exceptions is occurs or not finally block will be executed:
 		The finally block is always executed after the try-catch blocks, whether an exception is thrown or not. It is typically used for cleanup code.
14.throws an exception, will be executed method by method:
		The throws keyword is used in method signatures to declare that a method can throw certain exceptions. It allows the caller of the method to handle these exceptions.
15.throw is for runtime exceptions and will call predefined exceptions and user defined Exceptions:
		The throw keyword is used to explicitly throw an exception, which can be either a predefined (standard) or user-defined exception, not just runtime exceptions.
16.try followed by either catch block or finally block:
		A try block must be followed by at least one catch block or a finally block.
17.We should follow exceptions hierarchical:
		It's good practice to follow the exception hierarchy, catching more specific exceptions before more general ones to ensure proper handling.
18.We can create our own (User Defined) exceptions:
		You can define your own exception classes in Java by extending Exception or RuntimeException.
19.Our own exceptions extends Exception or Runtime Exception:
		User-defined exceptions should extend either Exception (for checked exceptions) or RuntimeException (for unchecked exceptions).
20.All Exceptions classes are in to java.lang package:
 		The java.lang package contains the Throwable class and its subclasses, Exception and Error, along with many standard exception classes.
21.If a class can throw multiple exceptions, the developer should handle the first exception before handling the second exception:
		When handling multiple exceptions, the developer should catch and handle the first exception that may occur before handling any subsequent exceptions.
22.Developer can't control Error:
 		Errors (like OutOfMemoryError, StackOverflowError) are serious issues that typically cannot be handled and recovered from by a Java application, as they indicate problems with the JVM or system resources.
23.Handling Multiple Exceptions with throws
        In Java, the throws keyword is used in the method signature to indicate that the 
        method   might throw one or more exceptions.
24.Handling Multiple Exceptions Using Multi-Catch
25. Nested Try-Catch :
		a try block can have another try-catch block.